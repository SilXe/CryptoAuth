{"ast":null,"code":"import { getCode } from '../actions/public/getCode.js';\nexport const fees = {\n  /*\n   * Estimates the fees per gas for a transaction.\n      * If the transaction is to be paid in a token (feeCurrency is present) then the fees\n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   *\n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async params => {\n    if (!params.request?.feeCurrency) return null;\n    const [gasPrice, maxPriorityFeePerGas, cel2] = await Promise.all([estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency), estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency), isCel2(params.client)]);\n    const maxFeePerGas = cel2 ?\n    // eth_gasPrice for cel2 returns baseFeePerGas + maxPriorityFeePerGas\n    params.multiply(gasPrice - maxPriorityFeePerGas) + maxPriorityFeePerGas :\n    // eth_gasPrice for Celo L1 returns (baseFeePerGas * multiplier), where the multiplier is 2 by default.\n    gasPrice + maxPriorityFeePerGas;\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n};\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(client, feeCurrency) {\n  const fee = await client.request({\n    method: 'eth_gasPrice',\n    params: [feeCurrency]\n  });\n  return BigInt(fee);\n}\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {\n  const feesPerGas = await client.request({\n    method: 'eth_maxPriorityFeePerGas',\n    params: [feeCurrency]\n  });\n  return BigInt(feesPerGas);\n}\nasync function isCel2(client) {\n  const proxyAdminAddress = '0x4200000000000000000000000000000000000018';\n  const code = await getCode(client, {\n    address: proxyAdminAddress\n  });\n  return Boolean(code);\n}","map":{"version":3,"names":["getCode","fees","estimateFeesPerGas","params","request","feeCurrency","gasPrice","maxPriorityFeePerGas","cel2","Promise","all","estimateFeePerGasInFeeCurrency","client","estimateMaxPriorityFeePerGasInFeeCurrency","isCel2","maxFeePerGas","multiply","fee","method","BigInt","feesPerGas","proxyAdminAddress","code","address","Boolean"],"sources":["C:\\nft_auth_app\\frontend\\node_modules\\viem\\celo\\fees.ts"],"sourcesContent":["import { getCode } from '../actions/public/getCode.js'\nimport type { Client } from '../clients/createClient.js'\nimport type {\n  Address,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFees,\n  Hex,\n} from '../index.js'\nimport type { formatters } from './formatters.js'\n\nexport const fees: ChainFees<typeof formatters> = {\n  /*\n   * Estimates the fees per gas for a transaction.\n\n   * If the transaction is to be paid in a token (feeCurrency is present) then the fees \n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   * \n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async (\n    params: ChainEstimateFeesPerGasFnParameters<typeof formatters>,\n  ) => {\n    if (!params.request?.feeCurrency) return null\n\n    const [gasPrice, maxPriorityFeePerGas, cel2] = await Promise.all([\n      estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n      estimateMaxPriorityFeePerGasInFeeCurrency(\n        params.client,\n        params.request.feeCurrency,\n      ),\n      isCel2(params.client),\n    ])\n\n    const maxFeePerGas = cel2\n      ? // eth_gasPrice for cel2 returns baseFeePerGas + maxPriorityFeePerGas\n        params.multiply(gasPrice - maxPriorityFeePerGas) + maxPriorityFeePerGas\n      : // eth_gasPrice for Celo L1 returns (baseFeePerGas * multiplier), where the multiplier is 2 by default.\n        gasPrice + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  },\n}\n\ntype RequestGasPriceInFeeCurrencyParams = {\n  Method: 'eth_gasPrice'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const fee = await client.request<RequestGasPriceInFeeCurrencyParams>({\n    method: 'eth_gasPrice',\n    params: [feeCurrency],\n  })\n  return BigInt(fee)\n}\n\ntype RequestMaxGasPriceInFeeCurrencyParams = {\n  Method: 'eth_maxPriorityFeePerGas'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const feesPerGas =\n    await client.request<RequestMaxGasPriceInFeeCurrencyParams>({\n      method: 'eth_maxPriorityFeePerGas',\n      params: [feeCurrency],\n    })\n  return BigInt(feesPerGas)\n}\n\nasync function isCel2(client: Client) {\n  const proxyAdminAddress = '0x4200000000000000000000000000000000000018'\n  const code = await getCode(client, { address: proxyAdminAddress })\n  return Boolean(code)\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,8BAA8B;AAUtD,OAAO,MAAMC,IAAI,GAAiC;EAChD;;;;;;;;EASAC,kBAAkB,EAAE,MAClBC,MAA8D,IAC5D;IACF,IAAI,CAACA,MAAM,CAACC,OAAO,EAAEC,WAAW,EAAE,OAAO,IAAI;IAE7C,MAAM,CAACC,QAAQ,EAAEC,oBAAoB,EAAEC,IAAI,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC/DC,8BAA8B,CAACR,MAAM,CAACS,MAAM,EAAET,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC,EACzEQ,yCAAyC,CACvCV,MAAM,CAACS,MAAM,EACbT,MAAM,CAACC,OAAO,CAACC,WAAW,CAC3B,EACDS,MAAM,CAACX,MAAM,CAACS,MAAM,CAAC,CACtB,CAAC;IAEF,MAAMG,YAAY,GAAGP,IAAI;IACrB;IACAL,MAAM,CAACa,QAAQ,CAACV,QAAQ,GAAGC,oBAAoB,CAAC,GAAGA,oBAAoB;IACvE;IACAD,QAAQ,GAAGC,oBAAoB;IAEnC,OAAO;MACLQ,YAAY;MACZR;KACD;EACH;CACD;AAQD;;;;;;;;;AASA,eAAeI,8BAA8BA,CAC3CC,MAAc,EACdP,WAAoB;EAEpB,MAAMY,GAAG,GAAG,MAAML,MAAM,CAACR,OAAO,CAAqC;IACnEc,MAAM,EAAE,cAAc;IACtBf,MAAM,EAAE,CAACE,WAAW;GACrB,CAAC;EACF,OAAOc,MAAM,CAACF,GAAG,CAAC;AACpB;AAQA;;;;;;;;;AASA,eAAeJ,yCAAyCA,CACtDD,MAAc,EACdP,WAAoB;EAEpB,MAAMe,UAAU,GACd,MAAMR,MAAM,CAACR,OAAO,CAAwC;IAC1Dc,MAAM,EAAE,0BAA0B;IAClCf,MAAM,EAAE,CAACE,WAAW;GACrB,CAAC;EACJ,OAAOc,MAAM,CAACC,UAAU,CAAC;AAC3B;AAEA,eAAeN,MAAMA,CAACF,MAAc;EAClC,MAAMS,iBAAiB,GAAG,4CAA4C;EACtE,MAAMC,IAAI,GAAG,MAAMtB,OAAO,CAACY,MAAM,EAAE;IAAEW,OAAO,EAAEF;EAAiB,CAAE,CAAC;EAClE,OAAOG,OAAO,CAACF,IAAI,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}