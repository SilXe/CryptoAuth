/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface GovernanceSlasher extends Contract {
    clone(): GovernanceSlasher;
    methods: {
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(registryAddress: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        setSlasherExecuter(_slasherExecuter: string): CeloTxObject<void>;
        approveSlashing(account: string, penalty: number | string): CeloTxObject<void>;
        slash(account: string, electionLessers: string[], electionGreaters: string[], electionIndices: (number | string)[]): CeloTxObject<boolean>;
        slashL2(account: string, group: string, electionLessers: string[], electionGreaters: string[], electionIndices: (number | string)[]): CeloTxObject<boolean>;
        getApprovedSlashing(account: string): CeloTxObject<string>;
        getSlasherExecuter(): CeloTxObject<string>;
    };
    events: {
        GovernanceSlashL2Performed: ContractEvent<{
            account: string;
            group: string;
            amount: string;
            0: string;
            1: string;
            2: string;
        }>;
        GovernanceSlashPerformed: ContractEvent<{
            account: string;
            amount: string;
            0: string;
            1: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SlasherExecuterSet: ContractEvent<string>;
        SlashingApproved: ContractEvent<{
            account: string;
            amount: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newGovernanceSlasher(web3: Web3, address: string): GovernanceSlasher;
