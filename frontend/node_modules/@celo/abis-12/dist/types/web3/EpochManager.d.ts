/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface EpochManager extends Contract {
    clone(): EpochManager;
    methods: {
        electedAccounts(arg0: number | string): CeloTxObject<string>;
        electedSigners(arg0: number | string): CeloTxObject<string>;
        epochDuration(): CeloTxObject<string>;
        epochProcessing(): CeloTxObject<{
            status: string;
            perValidatorReward: string;
            totalRewardsVoter: string;
            totalRewardsCommunity: string;
            totalRewardsCarbonFund: string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        }>;
        firstKnownEpoch(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isSystemInitialized(): CeloTxObject<boolean>;
        oracleAddress(): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        processedGroups(arg0: string): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        toProcessGroups(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        validatorPendingPayments(arg0: string): CeloTxObject<string>;
        initialize(registryAddress: string, newEpochDuration: number | string): CeloTxObject<void>;
        initializeSystem(firstEpochNumber: number | string, firstEpochBlock: number | string, firstElected: string[]): CeloTxObject<void>;
        startNextEpochProcess(): CeloTxObject<void>;
        setToProcessGroups(): CeloTxObject<void>;
        processGroups(groups: string[], lessers: string[], greaters: string[]): CeloTxObject<void>;
        processGroup(group: string, lesser: string, greater: string): CeloTxObject<void>;
        finishNextEpochProcess(groups: string[], lessers: string[], greaters: string[]): CeloTxObject<void>;
        sendValidatorPayment(validator: string): CeloTxObject<void>;
        getCurrentEpoch(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        getCurrentEpochNumber(): CeloTxObject<string>;
        getEpochProcessingState(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        }>;
        isBlocked(): CeloTxObject<boolean>;
        numberOfElectedInCurrentSet(): CeloTxObject<string>;
        getElectedAccounts(): CeloTxObject<string[]>;
        getElectedAccountByIndex(index: number | string): CeloTxObject<string>;
        getElectedSigners(): CeloTxObject<string[]>;
        getElectedSignerByIndex(index: number | string): CeloTxObject<string>;
        getFirstBlockAtEpoch(epoch: number | string): CeloTxObject<string>;
        getLastBlockAtEpoch(epoch: number | string): CeloTxObject<string>;
        getEpochNumberOfBlock(_blockNumber: number | string): CeloTxObject<string>;
        getEpochByBlockNumber(_blockNumber: number | string): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        setEpochDuration(newEpochDuration: number | string): CeloTxObject<void>;
        setOracleAddress(newOracleAddress: string): CeloTxObject<void>;
        isIndividualProcessing(): CeloTxObject<boolean>;
        isEpochProcessingStarted(): CeloTxObject<boolean>;
        isTimeForNextEpoch(): CeloTxObject<boolean>;
        isOnEpochProcess(): CeloTxObject<boolean>;
        systemAlreadyInitialized(): CeloTxObject<boolean>;
        getEpochByNumber(epochNumber: number | string): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
    };
    events: {
        EpochDurationSet: ContractEvent<string>;
        EpochProcessingEnded: ContractEvent<string>;
        EpochProcessingStarted: ContractEvent<string>;
        GroupMarkedForProcessing: ContractEvent<{
            group: string;
            epochNumber: string;
            0: string;
            1: string;
        }>;
        GroupProcessed: ContractEvent<{
            group: string;
            epochNumber: string;
            0: string;
            1: string;
        }>;
        OracleAddressSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        ValidatorEpochPaymentDistributed: ContractEvent<{
            validator: string;
            validatorPayment: string;
            group: string;
            groupPayment: string;
            beneficiary: string;
            delegatedPayment: string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newEpochManager(web3: Web3, address: string): EpochManager;
