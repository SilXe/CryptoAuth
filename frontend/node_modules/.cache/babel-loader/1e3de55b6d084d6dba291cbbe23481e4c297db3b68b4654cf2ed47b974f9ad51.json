{"ast":null,"code":"var _jsxFileName = \"C:\\\\nft_auth_app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../lib/contractInfo';\nimport { ethers } from 'ethers';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Store user data (address)\n  const [hasNFT, setHasNFT] = useState(null);\n  useEffect(() => {\n    if (user && isAuthenticated) {\n      checkNFT(user);\n    }\n  }, [user, isAuthenticated]);\n\n  // Login function\n  const login = userData => {\n    setUser(userData); // Set user data when logging in\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null); // Reset user data when logging out\n  };\n  const checkNFT = async walletAddress => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\n      const balance = await contract.balanceOf(walletAddress);\n      setHasNFT(balance > 0n);\n    } catch (err) {\n      console.error('Error checking NFT:', err);\n      setHasNFT(false);\n    }\n  };\n  const isAuthenticated = !!user;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isAuthenticated,\n      hasNFT\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"30YoqzcyhnOhrQzSqTt/5RQ/1Bs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","CONTRACT_ADDRESS","CONTRACT_ABI","ethers","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","hasNFT","setHasNFT","isAuthenticated","checkNFT","login","userData","logout","walletAddress","provider","BrowserProvider","window","ethereum","contract","Contract","balance","balanceOf","err","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/nft_auth_app/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../lib/contractInfo';\r\nimport { ethers } from 'ethers';\r\nimport { useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);  // Store user data (address)\r\n  const [hasNFT, setHasNFT] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (user && isAuthenticated) {\r\n      checkNFT(user);\r\n    }\r\n  }, [user, isAuthenticated]);\r\n\r\n  // Login function\r\n  const login = (userData) => {\r\n    setUser(userData);  // Set user data when logging in\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);  // Reset user data when logging out\r\n  };\r\n\r\n  const checkNFT = async (walletAddress) => {\r\n    try {\r\n      const provider = new ethers.BrowserProvider(window.ethereum);\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\r\n      const balance = await contract.balanceOf(walletAddress);\r\n      setHasNFT(balance > 0n);\r\n    } catch (err) {\r\n      console.error('Error checking NFT:', err);\r\n      setHasNFT(false);\r\n    }\r\n  };\r\n\r\n  const isAuthenticated = !!user;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, isAuthenticated, hasNFT }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,qBAAqB;AACpE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACzC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE1CI,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,IAAII,eAAe,EAAE;MAC3BC,QAAQ,CAACL,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACA,IAAI,EAAEI,eAAe,CAAC,CAAC;;EAE3B;EACA,MAAME,KAAK,GAAIC,QAAQ,IAAK;IAC1BN,OAAO,CAACM,QAAQ,CAAC,CAAC,CAAE;EACtB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBP,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;EAClB,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAOI,aAAa,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,eAAe,CAACC,MAAM,CAACC,QAAQ,CAAC;MAC5D,MAAMC,QAAQ,GAAG,IAAItB,MAAM,CAACuB,QAAQ,CAACzB,gBAAgB,EAAEC,YAAY,EAAEmB,QAAQ,CAAC;MAC9E,MAAMM,OAAO,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAACR,aAAa,CAAC;MACvDN,SAAS,CAACa,OAAO,GAAG,EAAE,CAAC;IACzB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzCf,SAAS,CAAC,KAAK,CAAC;IAClB;EACF,CAAC;EAED,MAAMC,eAAe,GAAG,CAAC,CAACJ,IAAI;EAE9B,oBACEL,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,IAAI;MAAEM,KAAK;MAAEE,MAAM;MAAEJ,eAAe;MAAEF;IAAO,CAAE;IAAAJ,QAAA,EAC3EA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAG3B,CAAC;AAAC3B,EAAA,CAxCWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AA0CzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzC,UAAU,CAACQ,WAAW,CAAC;AAAA;AAACiC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}