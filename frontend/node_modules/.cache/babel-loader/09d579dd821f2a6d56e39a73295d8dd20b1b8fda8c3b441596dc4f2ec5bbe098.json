{"ast":null,"code":"var _jsxFileName = \"C:\\\\nft_auth_app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../lib/contractInfo';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // { walletAddress, role }\n  const [hasNFT, setHasNFT] = useState(null); // null = not checked yet\n\n  const isAuthenticated = !!user;\n\n  // ✅ Login stores user info and provider\n  const login = (userData, connectedProvider) => {\n    setUser(userData);\n  };\n  const logout = () => {\n    setUser(null);\n    setProvider(null);\n    setHasNFT(null);\n  };\n\n  // ✅ Use saved provider to check NFT\n  const checkNFT = async walletAddress => {\n    try {\n      if (!provider) {\n        console.warn('⚠️ No provider available for NFT check');\n        return;\n      }\n      const network = await provider.getNetwork();\n      console.log('🔍 NFT Check - Current network:', network);\n      if (network.chainId !== 44787n) {\n        console.warn('⛔ Not on Celo Alfajores, skipping NFT check');\n        setHasNFT(false);\n        return;\n      }\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\n      const balance = await contract.balanceOf(walletAddress);\n      console.log('🎯 NFT balance:', balance.toString());\n      setHasNFT(balance > 0n);\n      console.log('✅ hasNFT set to:', balance > 0n);\n    } catch (err) {\n      console.error('❌ Error checking NFT:', err);\n      setHasNFT(false);\n    }\n  };\n\n  // ✅ Automatically check NFT after login\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.walletAddress && isAuthenticated) {\n      checkNFT(user.walletAddress);\n    }\n  }, [user, isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      provider,\n      login,\n      logout,\n      isAuthenticated,\n      hasNFT\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"30YoqzcyhnOhrQzSqTt/5RQ/1Bs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","CONTRACT_ADDRESS","CONTRACT_ABI","ethers","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","hasNFT","setHasNFT","isAuthenticated","login","userData","connectedProvider","logout","setProvider","checkNFT","walletAddress","provider","console","warn","network","getNetwork","log","chainId","contract","Contract","balance","balanceOf","toString","err","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/nft_auth_app/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../lib/contractInfo';\r\nimport { ethers } from 'ethers';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // { walletAddress, role }\r\n  const [hasNFT, setHasNFT] = useState(null); // null = not checked yet\r\n\r\n  const isAuthenticated = !!user;\r\n\r\n  // ✅ Login stores user info and provider\r\n  const login = (userData, connectedProvider) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setProvider(null);\r\n    setHasNFT(null);\r\n  };\r\n\r\n  // ✅ Use saved provider to check NFT\r\n  const checkNFT = async (walletAddress) => {\r\n    try {\r\n      if (!provider) {\r\n        console.warn('⚠️ No provider available for NFT check');\r\n        return;\r\n      }\r\n\r\n      const network = await provider.getNetwork();\r\n      console.log('🔍 NFT Check - Current network:', network);\r\n\r\n      if (network.chainId !== 44787n) {\r\n        console.warn('⛔ Not on Celo Alfajores, skipping NFT check');\r\n        setHasNFT(false);\r\n        return;\r\n      }\r\n\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\r\n      const balance = await contract.balanceOf(walletAddress);\r\n      console.log('🎯 NFT balance:', balance.toString());\r\n\r\n      setHasNFT(balance > 0n);\r\n      console.log('✅ hasNFT set to:', balance > 0n);\r\n\r\n    } catch (err) {\r\n      console.error('❌ Error checking NFT:', err);\r\n      setHasNFT(false);\r\n    }\r\n  };\r\n\r\n  // ✅ Automatically check NFT after login\r\n  useEffect(() => {\r\n    if (user?.walletAddress && isAuthenticated) {\r\n      checkNFT(user.walletAddress);\r\n    }\r\n  }, [user, isAuthenticated]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user,\r\n      provider,\r\n      login,\r\n      logout,\r\n      isAuthenticated,\r\n      hasNFT\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}