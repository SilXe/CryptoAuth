/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface FeeHandler extends Contract {
    clone(): FeeHandler;
    methods: {
        FIXED1_UINT(): CeloTxObject<string>;
        MIN_BURN(): CeloTxObject<string>;
        ignoreRenaming_carbonFeeBeneficiary(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(_registryAddress: string, newFeeBeneficiary: string, newCarbonFraction: number | string, tokens: string[], handlers: string[], newLimits: (number | string)[], newMaxSlippages: (number | string)[]): CeloTxObject<void>;
        setCarbonFraction(newFraction: number | string): CeloTxObject<void>;
        setDistributionAndBurnAmounts(tokenAddress: string): CeloTxObject<void>;
        changeOtherBeneficiaryAllocation(beneficiary: string, _newFraction: number | string): CeloTxObject<void>;
        addOtherBeneficiary(beneficiary: string, _newFraction: number | string, name: string): CeloTxObject<void>;
        removeOtherBeneficiary(beneficiary: string): CeloTxObject<void>;
        setBeneficiaryFraction(beneficiaryAddress: string, _newFraction: number | string): CeloTxObject<void>;
        setBeneficiaryName(beneficiary: string, name: string): CeloTxObject<void>;
        setCarbonFeeBeneficiary(beneficiary: string): CeloTxObject<void>;
        sell(tokenAddress: string): CeloTxObject<void>;
        addToken(tokenAddress: string, handlerAddress: string): CeloTxObject<void>;
        activateToken(tokenAddress: string): CeloTxObject<void>;
        deactivateToken(tokenAddress: string): CeloTxObject<void>;
        setHandler(tokenAddress: string, handlerAddress: string): CeloTxObject<void>;
        removeToken(tokenAddress: string): CeloTxObject<void>;
        distribute(tokenAddress: string): CeloTxObject<void>;
        setMaxSplippage(token: string, newMax: number | string): CeloTxObject<void>;
        setDailySellLimit(token: string, newLimit: number | string): CeloTxObject<void>;
        burnCelo(): CeloTxObject<void>;
        distributeAll(): CeloTxObject<void>;
        handleAll(): CeloTxObject<void>;
        handle(tokenAddress: string): CeloTxObject<void>;
        transfer(token: string, recipient: string, value: number | string): CeloTxObject<boolean>;
        getCeloToBeBurned(): CeloTxObject<string>;
        getPastBurnForToken(token: string): CeloTxObject<string>;
        carbonFeeBeneficiary(): CeloTxObject<string>;
        getTokenHandler(tokenAddress: string): CeloTxObject<string>;
        getTokenActive(tokenAddress: string): CeloTxObject<boolean>;
        getTokenMaxSlippage(tokenAddress: string): CeloTxObject<string>;
        getTokenDailySellLimit(tokenAddress: string): CeloTxObject<string>;
        getTokenCurrentDaySellLimit(tokenAddress: string): CeloTxObject<string>;
        getTokenToDistribute(tokenAddress: string): CeloTxObject<string>;
        getTokenToBurn(tokenAddress: string): CeloTxObject<string>;
        getCarbonFraction(): CeloTxObject<string>;
        getBurnFraction(): CeloTxObject<string>;
        getOtherBeneficiariesInfo(beneficiary: string): CeloTxObject<{
            0: string;
            1: string;
            2: boolean;
        }>;
        getTotalFractionOfOtherBeneficiariesAndCarbon(): CeloTxObject<string>;
        getOtherBeneficiariesAddresses(): CeloTxObject<string[]>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        dailySellLimitHit(token: string, amountToBurn: number | string): CeloTxObject<boolean>;
        getActiveTokens(): CeloTxObject<string[]>;
        shouldBurn(): CeloTxObject<boolean>;
    };
    events: {
        BeneficiaryAdded: ContractEvent<string>;
        BeneficiaryFractionSet: ContractEvent<{
            beneficiary: string;
            fraction: string;
            0: string;
            1: string;
        }>;
        BeneficiaryNameSet: ContractEvent<{
            beneficiary: string;
            name: string;
            0: string;
            1: string;
        }>;
        BeneficiaryRemoved: ContractEvent<string>;
        BurnFractionSet: ContractEvent<string>;
        CarbonFractionSet: ContractEvent<string>;
        DailyLimitHit: ContractEvent<{
            token: string;
            burning: string;
            0: string;
            1: string;
        }>;
        DailyLimitSet: ContractEvent<{
            tokenAddress: string;
            newLimit: string;
            0: string;
            1: string;
        }>;
        DailySellLimitUpdated: ContractEvent<string>;
        DistributionAmountSet: ContractEvent<{
            tokenAddress: string;
            amount: string;
            0: string;
            1: string;
        }>;
        FeeBeneficiarySet: ContractEvent<string>;
        MaxSlippageSet: ContractEvent<{
            token: string;
            maxSlippage: string;
            0: string;
            1: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SoldAndBurnedToken: ContractEvent<{
            token: string;
            value: string;
            0: string;
            1: string;
        }>;
        TokenAdded: ContractEvent<{
            tokenAddress: string;
            handlerAddress: string;
            0: string;
            1: string;
        }>;
        TokenRemoved: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newFeeHandler(web3: Web3, address: string): FeeHandler;
