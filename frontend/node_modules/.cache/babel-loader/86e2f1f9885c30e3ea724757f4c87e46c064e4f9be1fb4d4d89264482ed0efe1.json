{"ast":null,"code":"var _jsxFileName = \"C:\\\\nft_auth_app\\\\frontend\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { CoinbaseWalletSDK } from '@coinbase/wallet-sdk';\nimport { BrowserProvider, ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const {\n    user,\n    login,\n    logout,\n    isAuthenticated\n  } = useAuth();\n  const navigate = useNavigate();\n  const handleGoToLanding = () => {\n    navigate('/');\n  };\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n      const APP_NAME = 'CryptoAuth';\n      const RPC_URL = 'https://mainnet.infura.io/v3/151ac0015300430ca8ec9b62f8002589'; // Your Infura URL\n      const CHAIN_ID = 1;\n      const coinbaseWallet = new CoinbaseWalletSDK({\n        appName: APP_NAME,\n        darkMode: false,\n        theme: 'light',\n        appChainId: CHAIN_ID\n      });\n      const ethereum = coinbaseWallet.makeWeb3Provider(RPC_URL, CHAIN_ID);\n      const provider = new BrowserProvider(ethereum);\n      const accounts = await provider.send('eth_requestAccounts', []);\n      const address = accounts[0];\n\n      // Set the logged-in user\n      login({\n        walletAddress: address,\n        role: 'Member'\n      });\n\n      // Navigate to Dashboard automatically\n      // navigate('/dashboard'); ** Now needs to wait for the nft check **\n    } catch (error) {\n      console.error('❌ Wallet connection error:', error);\n      alert('Failed to connect wallet. Check console for error.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const handleMetaMaskLogin = async () => {\n    try {\n      var _window$ethereum, _window$ethereum$prov;\n      setIsConnecting(true);\n      let ethereum = window.ethereum;\n      if ((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && (_window$ethereum$prov = _window$ethereum.providers) !== null && _window$ethereum$prov !== void 0 && _window$ethereum$prov.length) {\n        ethereum = window.ethereum.providers.find(p => p.isMetaMask);\n      }\n      if (!ethereum || !ethereum.isMetaMask) {\n        alert('MetaMask not detected');\n        return;\n      }\n      try {\n        // Try to switch first\n        await ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0xaef3'\n          }]\n        });\n      } catch (switchError) {\n        // If not added, try to add it\n        if (switchError.code === 4902) {\n          await ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0xaef3',\n              chainName: 'Celo Alfajores Testnet',\n              nativeCurrency: {\n                name: 'Celo',\n                symbol: 'CELO',\n                decimals: 18\n              },\n              rpcUrls: ['https://alfajores-forno.celo-testnet.org'],\n              blockExplorerUrls: ['https://explorer.celo.org/alfajores']\n            }]\n          });\n        } else {\n          throw switchError;\n        }\n      }\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.BrowserProvider(ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      login({\n        walletAddress: address,\n        role: 'Member'\n      });\n    } catch (err) {\n      console.error('❌ MetaMask connection error:', err);\n      alert('MetaMask connect failed. See console for details.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const handleLogout = () => {\n    logout();\n    navigate('/'); // Redirect to Landing page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '2rem 1rem 0.5rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoToLanding,\n        style: {\n          background: 'none',\n          border: 'none',\n          fontSize: '2rem',\n          fontWeight: 'bold',\n          cursor: 'pointer',\n          color: '#4f46e5'\n        },\n        children: \"CryptoAuth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        paddingTop: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isAuthenticated ? `Welcome, ${user}` : 'Login'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isAuthenticated ? handleLogout : handleConnect,\n            style: {\n              padding: '0.75rem 1.5rem',\n              backgroundColor: '#4f46e5',\n              color: 'white',\n              fontSize: '1rem',\n              border: 'none',\n              borderRadius: '8px',\n              cursor: 'pointer',\n              marginBottom: '1.5rem' // spacing between the two buttons\n            },\n            children: isAuthenticated ? 'Log Out' : isConnecting ? 'Connecting...' : 'Connect Coinbase Wallet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), !isAuthenticated && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleMetaMaskLogin,\n            style: {\n              padding: '0.75rem 1.5rem',\n              backgroundColor: '#f6851b',\n              color: 'white',\n              fontSize: '1rem',\n              border: 'none',\n              borderRadius: '8px',\n              cursor: 'pointer'\n            },\n            children: \"Connect to MetaMask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"qbkkYu1WfIup05yKCmMwsD3G8T0=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuth","CoinbaseWalletSDK","BrowserProvider","ethers","jsxDEV","_jsxDEV","LoginPage","_s","isConnecting","setIsConnecting","user","login","logout","isAuthenticated","navigate","handleGoToLanding","handleConnect","APP_NAME","RPC_URL","CHAIN_ID","coinbaseWallet","appName","darkMode","theme","appChainId","ethereum","makeWeb3Provider","provider","accounts","send","address","walletAddress","role","error","console","alert","handleMetaMaskLogin","_window$ethereum","_window$ethereum$prov","window","providers","length","find","p","isMetaMask","request","method","params","chainId","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","signer","getSigner","getAddress","err","handleLogout","style","minHeight","display","flexDirection","children","textAlign","padding","onClick","background","border","fontSize","fontWeight","cursor","color","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","justifyContent","alignItems","paddingTop","backgroundColor","borderRadius","marginBottom","_c","$RefreshReg$"],"sources":["C:/nft_auth_app/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { CoinbaseWalletSDK } from '@coinbase/wallet-sdk';\r\nimport { BrowserProvider, ethers } from 'ethers';\r\n\r\nconst LoginPage = () => {\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const { user, login, logout, isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  const handleGoToLanding = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleConnect = async () => {\r\n    try {\r\n      setIsConnecting(true);\r\n      const APP_NAME = 'CryptoAuth';\r\n      const RPC_URL = 'https://mainnet.infura.io/v3/151ac0015300430ca8ec9b62f8002589'; // Your Infura URL\r\n      const CHAIN_ID = 1;\r\n\r\n      const coinbaseWallet = new CoinbaseWalletSDK({\r\n        appName: APP_NAME,\r\n        darkMode: false,\r\n        theme: 'light',\r\n        appChainId: CHAIN_ID,\r\n      });\r\n\r\n      const ethereum = coinbaseWallet.makeWeb3Provider(RPC_URL, CHAIN_ID);\r\n      const provider = new BrowserProvider(ethereum);\r\n      const accounts = await provider.send('eth_requestAccounts', []);\r\n      const address = accounts[0];\r\n\r\n      // Set the logged-in user\r\n      login({ walletAddress: address, role: 'Member' });\r\n\r\n      // Navigate to Dashboard automatically\r\n      // navigate('/dashboard'); ** Now needs to wait for the nft check **\r\n    } catch (error) {\r\n      console.error('❌ Wallet connection error:', error);\r\n      alert('Failed to connect wallet. Check console for error.');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n  const handleMetaMaskLogin = async () => {\r\n    try {\r\n      setIsConnecting(true);\r\n  \r\n      let ethereum = window.ethereum;\r\n  \r\n      if (window.ethereum?.providers?.length) {\r\n        ethereum = window.ethereum.providers.find(p => p.isMetaMask);\r\n      }\r\n  \r\n      if (!ethereum || !ethereum.isMetaMask) {\r\n        alert('MetaMask not detected');\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        // Try to switch first\r\n        await ethereum.request({\r\n          method: 'wallet_switchEthereumChain',\r\n          params: [{ chainId: '0xaef3' }]\r\n        });\r\n      } catch (switchError) {\r\n        // If not added, try to add it\r\n        if (switchError.code === 4902) {\r\n          await ethereum.request({\r\n            method: 'wallet_addEthereumChain',\r\n            params: [{\r\n              chainId: '0xaef3',\r\n              chainName: 'Celo Alfajores Testnet',\r\n              nativeCurrency: {\r\n                name: 'Celo',\r\n                symbol: 'CELO',\r\n                decimals: 18\r\n              },\r\n              rpcUrls: ['https://alfajores-forno.celo-testnet.org'],\r\n              blockExplorerUrls: ['https://explorer.celo.org/alfajores']\r\n            }]\r\n          });\r\n        } else {\r\n          throw switchError;\r\n        }\r\n      }\r\n  \r\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n      const provider = new ethers.BrowserProvider(ethereum);\r\n      const signer = await provider.getSigner();\r\n      const address = await signer.getAddress();\r\n  \r\n      login({ walletAddress: address, role: 'Member' });\r\n  \r\n    } catch (err) {\r\n      console.error('❌ MetaMask connection error:', err);\r\n      alert('MetaMask connect failed. See console for details.');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    navigate('/');  // Redirect to Landing page\r\n  };\r\n\r\n  return (\r\n    <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      {/* Top Center: CryptoAuth Logo/Button */}\r\n      <div style={{ textAlign: 'center', padding: '2rem 1rem 0.5rem' }}>\r\n        <button\r\n          onClick={handleGoToLanding}\r\n          style={{\r\n            background: 'none',\r\n            border: 'none',\r\n            fontSize: '2rem',\r\n            fontWeight: 'bold',\r\n            cursor: 'pointer',\r\n            color: '#4f46e5',\r\n          }}\r\n        >\r\n          CryptoAuth\r\n        </button>\r\n      </div>\r\n\r\n      {/* Center Section: Login Buttons */}\r\n      <div style={{ flexGrow: 1, display: 'flex', justifyContent: 'center', alignItems: 'flex-start', paddingTop: '1rem' }}>\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h2>{isAuthenticated ? `Welcome, ${user}` : 'Login'}</h2>\r\n\r\n          {/* Group Coinbase and MetaMask buttons in a vertical stack */}\r\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            {/* 🔵 Coinbase Wallet */}\r\n            <button\r\n              onClick={isAuthenticated ? handleLogout : handleConnect}\r\n              style={{\r\n                padding: '0.75rem 1.5rem',\r\n                backgroundColor: '#4f46e5',\r\n                color: 'white',\r\n                fontSize: '1rem',\r\n                border: 'none',\r\n                borderRadius: '8px',\r\n                cursor: 'pointer',\r\n                marginBottom: '1.5rem', // spacing between the two buttons\r\n              }}\r\n            >\r\n              {isAuthenticated ? 'Log Out' : isConnecting ? 'Connecting...' : 'Connect Coinbase Wallet'}\r\n            </button>\r\n\r\n            {/* 🟠 MetaMask Wallet */}\r\n            {!isAuthenticated && (\r\n              <button\r\n                onClick={handleMetaMaskLogin}\r\n                style={{\r\n                  padding: '0.75rem 1.5rem',\r\n                  backgroundColor: '#f6851b',\r\n                  color: 'white',\r\n                  fontSize: '1rem',\r\n                  border: 'none',\r\n                  borderRadius: '8px',\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                Connect to MetaMask\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,eAAe,EAAEC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM;IAAEa,IAAI;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAgB,CAAC,GAAGb,OAAO,CAAC,CAAC;EAC1D,MAAMc,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9B,MAAMgB,iBAAiB,GAAGA,CAAA,KAAM;IAC9BD,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACFP,eAAe,CAAC,IAAI,CAAC;MACrB,MAAMQ,QAAQ,GAAG,YAAY;MAC7B,MAAMC,OAAO,GAAG,+DAA+D,CAAC,CAAC;MACjF,MAAMC,QAAQ,GAAG,CAAC;MAElB,MAAMC,cAAc,GAAG,IAAInB,iBAAiB,CAAC;QAC3CoB,OAAO,EAAEJ,QAAQ;QACjBK,QAAQ,EAAE,KAAK;QACfC,KAAK,EAAE,OAAO;QACdC,UAAU,EAAEL;MACd,CAAC,CAAC;MAEF,MAAMM,QAAQ,GAAGL,cAAc,CAACM,gBAAgB,CAACR,OAAO,EAAEC,QAAQ,CAAC;MACnE,MAAMQ,QAAQ,GAAG,IAAIzB,eAAe,CAACuB,QAAQ,CAAC;MAC9C,MAAMG,QAAQ,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC/D,MAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAC,CAAC;;MAE3B;MACAjB,KAAK,CAAC;QAAEoB,aAAa,EAAED,OAAO;QAAEE,IAAI,EAAE;MAAS,CAAC,CAAC;;MAEjD;MACA;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDE,KAAK,CAAC,oDAAoD,CAAC;IAC7D,CAAC,SAAS;MACR1B,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAM2B,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MAAA,IAAAC,gBAAA,EAAAC,qBAAA;MACF7B,eAAe,CAAC,IAAI,CAAC;MAErB,IAAIgB,QAAQ,GAAGc,MAAM,CAACd,QAAQ;MAE9B,KAAAY,gBAAA,GAAIE,MAAM,CAACd,QAAQ,cAAAY,gBAAA,gBAAAC,qBAAA,GAAfD,gBAAA,CAAiBG,SAAS,cAAAF,qBAAA,eAA1BA,qBAAA,CAA4BG,MAAM,EAAE;QACtChB,QAAQ,GAAGc,MAAM,CAACd,QAAQ,CAACe,SAAS,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC;MAC9D;MAEA,IAAI,CAACnB,QAAQ,IAAI,CAACA,QAAQ,CAACmB,UAAU,EAAE;QACrCT,KAAK,CAAC,uBAAuB,CAAC;QAC9B;MACF;MAEA,IAAI;QACF;QACA,MAAMV,QAAQ,CAACoB,OAAO,CAAC;UACrBC,MAAM,EAAE,4BAA4B;UACpCC,MAAM,EAAE,CAAC;YAAEC,OAAO,EAAE;UAAS,CAAC;QAChC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,WAAW,EAAE;QACpB;QACA,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;UAC7B,MAAMzB,QAAQ,CAACoB,OAAO,CAAC;YACrBC,MAAM,EAAE,yBAAyB;YACjCC,MAAM,EAAE,CAAC;cACPC,OAAO,EAAE,QAAQ;cACjBG,SAAS,EAAE,wBAAwB;cACnCC,cAAc,EAAE;gBACdC,IAAI,EAAE,MAAM;gBACZC,MAAM,EAAE,MAAM;gBACdC,QAAQ,EAAE;cACZ,CAAC;cACDC,OAAO,EAAE,CAAC,0CAA0C,CAAC;cACrDC,iBAAiB,EAAE,CAAC,qCAAqC;YAC3D,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,MAAMR,WAAW;QACnB;MACF;MAEA,MAAMrB,QAAQ,GAAG,MAAMH,QAAQ,CAACoB,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAC1E,MAAMnB,QAAQ,GAAG,IAAIxB,MAAM,CAACD,eAAe,CAACuB,QAAQ,CAAC;MACrD,MAAMiC,MAAM,GAAG,MAAM/B,QAAQ,CAACgC,SAAS,CAAC,CAAC;MACzC,MAAM7B,OAAO,GAAG,MAAM4B,MAAM,CAACE,UAAU,CAAC,CAAC;MAEzCjD,KAAK,CAAC;QAAEoB,aAAa,EAAED,OAAO;QAAEE,IAAI,EAAE;MAAS,CAAC,CAAC;IAEnD,CAAC,CAAC,OAAO6B,GAAG,EAAE;MACZ3B,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAE4B,GAAG,CAAC;MAClD1B,KAAK,CAAC,mDAAmD,CAAC;IAC5D,CAAC,SAAS;MACR1B,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAGD,MAAMqD,YAAY,GAAGA,CAAA,KAAM;IACzBlD,MAAM,CAAC,CAAC;IACRE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE;EAClB,CAAC;EAED,oBACET,OAAA;IAAK0D,KAAK,EAAE;MAAEC,SAAS,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAE3E9D,OAAA;MAAK0D,KAAK,EAAE;QAAEK,SAAS,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAmB,CAAE;MAAAF,QAAA,eAC/D9D,OAAA;QACEiE,OAAO,EAAEvD,iBAAkB;QAC3BgD,KAAK,EAAE;UACLQ,UAAU,EAAE,MAAM;UAClBC,MAAM,EAAE,MAAM;UACdC,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE,MAAM;UAClBC,MAAM,EAAE,SAAS;UACjBC,KAAK,EAAE;QACT,CAAE;QAAAT,QAAA,EACH;MAED;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN3E,OAAA;MAAK0D,KAAK,EAAE;QAAEkB,QAAQ,EAAE,CAAC;QAAEhB,OAAO,EAAE,MAAM;QAAEiB,cAAc,EAAE,QAAQ;QAAEC,UAAU,EAAE,YAAY;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAjB,QAAA,eACnH9D,OAAA;QAAK0D,KAAK,EAAE;UAAEK,SAAS,EAAE;QAAS,CAAE;QAAAD,QAAA,gBAClC9D,OAAA;UAAA8D,QAAA,EAAKtD,eAAe,GAAG,YAAYH,IAAI,EAAE,GAAG;QAAO;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAGzD3E,OAAA;UAAK0D,KAAK,EAAE;YAAEE,OAAO,EAAE,MAAM;YAAEC,aAAa,EAAE,QAAQ;YAAEiB,UAAU,EAAE;UAAS,CAAE;UAAAhB,QAAA,gBAE7E9D,OAAA;YACEiE,OAAO,EAAEzD,eAAe,GAAGiD,YAAY,GAAG9C,aAAc;YACxD+C,KAAK,EAAE;cACLM,OAAO,EAAE,gBAAgB;cACzBgB,eAAe,EAAE,SAAS;cAC1BT,KAAK,EAAE,OAAO;cACdH,QAAQ,EAAE,MAAM;cAChBD,MAAM,EAAE,MAAM;cACdc,YAAY,EAAE,KAAK;cACnBX,MAAM,EAAE,SAAS;cACjBY,YAAY,EAAE,QAAQ,CAAE;YAC1B,CAAE;YAAApB,QAAA,EAEDtD,eAAe,GAAG,SAAS,GAAGL,YAAY,GAAG,eAAe,GAAG;UAAyB;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnF,CAAC,EAGR,CAACnE,eAAe,iBACfR,OAAA;YACEiE,OAAO,EAAElC,mBAAoB;YAC7B2B,KAAK,EAAE;cACLM,OAAO,EAAE,gBAAgB;cACzBgB,eAAe,EAAE,SAAS;cAC1BT,KAAK,EAAE,OAAO;cACdH,QAAQ,EAAE,MAAM;cAChBD,MAAM,EAAE,MAAM;cACdc,YAAY,EAAE,KAAK;cACnBX,MAAM,EAAE;YACV,CAAE;YAAAR,QAAA,EACH;UAED;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzE,EAAA,CA1KID,SAAS;EAAA,QAEoCN,OAAO,EACvCD,WAAW;AAAA;AAAAyF,EAAA,GAHxBlF,SAAS;AA4Kf,eAAeA,SAAS;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}