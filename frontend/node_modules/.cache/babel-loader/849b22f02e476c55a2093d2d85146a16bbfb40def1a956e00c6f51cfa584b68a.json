{"ast":null,"code":"import { NFTStorage, File } from 'nft.storage';\nconst NFT_STORAGE_TOKEN = process.env.REACT_APP_NFT_STORAGE_TOKEN;\nconst client = new NFTStorage({\n  token: NFT_STORAGE_TOKEN\n});\nexport async function uploadToNFTStorage({\n  name,\n  emailHash,\n  imageFile\n}) {\n  const metadata = await client.store({\n    name,\n    description: 'CryptoAuth Identity NFT',\n    image: new File([imageFile], 'profile.png', {\n      type: imageFile.type\n    }),\n    properties: {\n      emailHash,\n      role: 'Member'\n    }\n  });\n  return metadata.url; // ipfs://... URL\n}","map":{"version":3,"names":["NFTStorage","File","NFT_STORAGE_TOKEN","process","env","REACT_APP_NFT_STORAGE_TOKEN","client","token","uploadToNFTStorage","name","emailHash","imageFile","metadata","store","description","image","type","properties","role","url"],"sources":["C:/nft_auth_app/frontend/src/lib/nftUploader.js"],"sourcesContent":["import { NFTStorage, File } from 'nft.storage';\r\n\r\nconst NFT_STORAGE_TOKEN = process.env.REACT_APP_NFT_STORAGE_TOKEN;\r\n\r\nconst client = new NFTStorage({ token: NFT_STORAGE_TOKEN });\r\n\r\nexport async function uploadToNFTStorage({ name, emailHash, imageFile }) {\r\n  const metadata = await client.store({\r\n    name,\r\n    description: 'CryptoAuth Identity NFT',\r\n    image: new File([imageFile], 'profile.png', { type: imageFile.type }),\r\n    properties: {\r\n      emailHash,\r\n      role: 'Member',\r\n    },\r\n  });\r\n\r\n  return metadata.url; // ipfs://... URL\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,QAAQ,aAAa;AAE9C,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;AAEjE,MAAMC,MAAM,GAAG,IAAIN,UAAU,CAAC;EAAEO,KAAK,EAAEL;AAAkB,CAAC,CAAC;AAE3D,OAAO,eAAeM,kBAAkBA,CAAC;EAAEC,IAAI;EAAEC,SAAS;EAAEC;AAAU,CAAC,EAAE;EACvE,MAAMC,QAAQ,GAAG,MAAMN,MAAM,CAACO,KAAK,CAAC;IAClCJ,IAAI;IACJK,WAAW,EAAE,yBAAyB;IACtCC,KAAK,EAAE,IAAId,IAAI,CAAC,CAACU,SAAS,CAAC,EAAE,aAAa,EAAE;MAAEK,IAAI,EAAEL,SAAS,CAACK;IAAK,CAAC,CAAC;IACrEC,UAAU,EAAE;MACVP,SAAS;MACTQ,IAAI,EAAE;IACR;EACF,CAAC,CAAC;EAEF,OAAON,QAAQ,CAACO,GAAG,CAAC,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}