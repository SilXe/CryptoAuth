{"ast":null,"code":"import React from 'react';\nimport CoinbaseWalletSDK from '@coinbase/wallet-sdk';\nimport { BrowserProvider } from 'ethers';\nconst LoginPage = () => {\n  const handleCoinbaseLogin = async () => {\n    try {\n      const APP_NAME = 'CryptoAuth';\n      const CHAIN_ID = 1;\n      const RPC_URL = 'https://mainnet.infura.io/v3/151ac0015300430ca8ec9b62f8002589'; // Replace with real ID\n\n      if (!RPC_URL || !CHAIN_ID) {\n        throw new Error('Missing RPC_URL or CHAIN_ID');\n      }\n      const coinbaseWallet = new CoinbaseWalletSDK({\n        appName: APP_NAME,\n        darkMode: false\n      });\n      const ethereum = coinbaseWallet.makeWeb3Provider(RPC_URL, CHAIN_ID);\n      if (!ethereum) {\n        throw new Error('Failed to initialize Coinbase provider.');\n      }\n      const provider = new BrowserProvider(ethereum);\n      const accounts = await provider.send('eth_requestAccounts', []);\n      if (!accounts || !accounts.length) {\n        throw new Error('No accounts returned from wallet.');\n      }\n      const address = accounts[0];\n      alert(`üü¢ Connected Wallet:\\n${address}`);\n    } catch (error) {\n      console.error('‚ùå Wallet connection error:', error);\n      alert('Failed to connect. Check console for error.');\n    }\n  };\n};\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","CoinbaseWalletSDK","BrowserProvider","LoginPage","handleCoinbaseLogin","APP_NAME","CHAIN_ID","RPC_URL","Error","coinbaseWallet","appName","darkMode","ethereum","makeWeb3Provider","provider","accounts","send","length","address","alert","error","console","_c","$RefreshReg$"],"sources":["C:/nft_auth_app/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport CoinbaseWalletSDK from '@coinbase/wallet-sdk';\r\nimport { BrowserProvider } from 'ethers';\r\n\r\nconst LoginPage = () => {\r\n  const handleCoinbaseLogin = async () => {\r\n    try {\r\n      const APP_NAME = 'CryptoAuth';\r\n      const CHAIN_ID = 1;\r\n      const RPC_URL = 'https://mainnet.infura.io/v3/151ac0015300430ca8ec9b62f8002589'; // Replace with real ID\r\n  \r\n      if (!RPC_URL || !CHAIN_ID) {\r\n        throw new Error('Missing RPC_URL or CHAIN_ID');\r\n      }\r\n  \r\n      const coinbaseWallet = new CoinbaseWalletSDK({\r\n        appName: APP_NAME,\r\n        darkMode: false,\r\n      });\r\n  \r\n      const ethereum = coinbaseWallet.makeWeb3Provider(RPC_URL, CHAIN_ID);\r\n  \r\n      if (!ethereum) {\r\n        throw new Error('Failed to initialize Coinbase provider.');\r\n      }\r\n  \r\n      const provider = new BrowserProvider(ethereum);\r\n      const accounts = await provider.send('eth_requestAccounts', []);\r\n  \r\n      if (!accounts || !accounts.length) {\r\n        throw new Error('No accounts returned from wallet.');\r\n      }\r\n  \r\n      const address = accounts[0];\r\n      alert(`üü¢ Connected Wallet:\\n${address}`);\r\n    } catch (error) {\r\n      console.error('‚ùå Wallet connection error:', error);\r\n      alert('Failed to connect. Check console for error.');\r\n    }\r\n  };\r\n  \r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,MAAM,sBAAsB;AACpD,SAASC,eAAe,QAAQ,QAAQ;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,YAAY;MAC7B,MAAMC,QAAQ,GAAG,CAAC;MAClB,MAAMC,OAAO,GAAG,+DAA+D,CAAC,CAAC;;MAEjF,IAAI,CAACA,OAAO,IAAI,CAACD,QAAQ,EAAE;QACzB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,cAAc,GAAG,IAAIR,iBAAiB,CAAC;QAC3CS,OAAO,EAAEL,QAAQ;QACjBM,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMC,QAAQ,GAAGH,cAAc,CAACI,gBAAgB,CAACN,OAAO,EAAED,QAAQ,CAAC;MAEnE,IAAI,CAACM,QAAQ,EAAE;QACb,MAAM,IAAIJ,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MAEA,MAAMM,QAAQ,GAAG,IAAIZ,eAAe,CAACU,QAAQ,CAAC;MAC9C,MAAMG,QAAQ,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAE/D,IAAI,CAACD,QAAQ,IAAI,CAACA,QAAQ,CAACE,MAAM,EAAE;QACjC,MAAM,IAAIT,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,MAAMU,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAC3BI,KAAK,CAAC,yBAAyBD,OAAO,EAAE,CAAC;IAC3C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDD,KAAK,CAAC,6CAA6C,CAAC;IACtD;EACF,CAAC;AAEH,CAAC;AAACG,EAAA,GArCInB,SAAS;AAuCf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}